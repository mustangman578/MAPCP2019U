#! \usr\bin\env 'python'

life_expectancy = 120; print( '\n' "The life expectancy for the millennials is projected to be %d years! (But don't believe it...) '\n' " % (life_expectancy) );

print('''
    A recent study published in the journal of Nature, discovered that over the past century,
    although the life expectancy has significantly increased due to technological advances,
    the maximum life span of the oldest people in the world has not changed much.''')

from cmath import sqrt # cmath function always return complex numbers


print('''
Cardano was the first to introduce complex numbers of the form a + sqrt(-b) into algebra, but he had misgivings about it.  

In his solution to an algebra equation he encountered the solution 5 + sqrt(-15) for the unknown, which is now mathematically represented by 

'\n'\n' 

{first:} 

'\n''\n' 

in Python, which can also be obtained as an additon of real and imaginary numbers in Python like this 
    
'\n''\n' 

5 + sqrt(-15) = {second:} 

'\n''\n' 

which can also be manually stated as

{third:} 

'\n' 

'''.format(first=5+sqrt(-15), second=complex(5,-15), third='5+3.872983346207417i'))

from math import sqrt # math function always work with and return real numbers

print('''
One final note: 

'\n'

'\t' In python the sqrt function from math and cmath modules are different.
'\t' The sqrt function that returns "float" results is sqrt from math module.
'\t' Therefore, if using math module, then,
'\t''\t'sqrt(25) = {:.4f},
'\t' whih is obviously a float (real number).

'''.format(sqrt(25)))

print('''

Also note that by convention, 0**0 = {first:d} in Python.
And division by 0, will give you a runtime exception: 1/0 = {second:}

''' .format(first=0**0,second='NaN')
)
